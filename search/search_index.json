{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Selekt is a Kotlin and familiar Android wrapper over SQLCipher, an SQLite extension that provides 256-bit AES encryption of database files. Selekt realises the maximum concurrency offered by SQLite3.","title":"Overview"},{"location":"getting_started/","text":"Integration Getting a database Using an open helper Kotlin object MyOpenHelperCallback : ISQLiteOpenHelper . Callback { override fun onCreate ( database : SQLiteDatabase ) { database . exec ( \"CREATE TABLE 'Foo' (bar INT)\" ) } override fun onUpgrade ( database : SQLiteDatabase , oldVersion : Int , newVersion : Int ) { TODO ( \"Migrate database.\" ) } } private fun deriveKey (): ByteArray ? = TODO ( \"Optional key.\" ) val databaseHelper = SQLiteOpenHelper ( context = context . applicationContext , configuration = ISQLiteOpenHelper . Configuration ( callback = MyOpenHelperCallback , key = deriveKey (), name = \"sample\" ), version = 3 ) Java class MyOpenHelperCallback implements ISQLiteOpenHelper . Callback { @Override public void onCreate ( final SQLiteDatabase database ) { database . exec ( \"CREATE TABLE 'Foo' (bar INT)\" ) } @Override public void onUpgrade ( final SQLiteDatabase database , final int oldVersion , final int newVersion ) { // TODO Migrate database. } } private byte [] deriveKey () { // TODO Optional key. } final SQLiteOpenHelper databaseHelper = new SQLiteOpenHelper ( context . applicationContext , 3 , new ISQLiteOpenHelper . Configuration ( MyOpenHelperCallback , deriveKey (), \"sample\" ) ) Using Room Kotlin import com.bloomberg.selekt.android.support.buildRoomDatabase private fun deriveKey (): ByteArray ? = TODO ( \"Optional key.\" ) buildRoomDatabase ( applicationContext , MyAppDatabase :: class . java , \"sample\" , SQLiteJournalMode . WAL , deriveKey () ) Java import com.bloomberg.selekt.android.support.buildRoomDatabase ; private byte [] deriveKey () { // TODO Optional key. } buildRoomDatabase ( applicationContext , MyAppDatabase . class , \"sample.db\" , SQLiteJournalMode . WAL , deriveKey () ) Directly Kotlin private fun deriveKey (): ByteArray ? = TODO ( \"Optional key.\" ) SQLiteDatabase . openOrCreateDatabase ( context . getDatabasePath ( \"sample\" ), SQLiteJournalMode . WAL . databaseConfiguration , deriveKey () ). apply { exec ( \"PRAGMA journal_mode=${SQLiteJournalMode.WAL}\" ) } Java private byte [] deriveKey () { // TODO Optional key. } final SQLiteDatabase database = SQLiteDatabase . openOrCreateDatabase ( targetContext . getDatabasePath ( \"sample\" ), SQLiteJournalMode . WAL . getDatabaseConfiguration (), deriveKey () ); database . exec ( \"PRAGMA journal_mode=WAL\" ); Interaction Querying the database Kotlin databaseHelper . writableDatabase . run { insertWithOnConflict ( \"Foo\" , ContentValues (). apply { put ( \"bar\" , 42 ) }, ConflictAlgorithm . REPLACE ) query ( false , \"Foo\" , arrayOf ( \"bar\" ), null , null ). use { it . moveToFirst () println ( it . getInt ( 0 )) } } Java final SQLiteDatabase database = databaseHelper . getWritableDatabase (); final ContentValues values = new ContentValues (); values . put ( \"bar\" , 42 ); database . insertWithOnConflict ( \"Foo\" , values , ConflictAlgorithm . REPLACE ); try ( Cursor cursor = query ( false , \"Foo\" , arrayOf ( \"bar\" ), null , null )) { cursor . moveToFirst (); System . out . println ( it . getInt ( 0 )); }","title":"Getting started"},{"location":"getting_started/#integration","text":"","title":"Integration"},{"location":"getting_started/#getting-a-database","text":"","title":"Getting a database"},{"location":"getting_started/#using-an-open-helper","text":"Kotlin object MyOpenHelperCallback : ISQLiteOpenHelper . Callback { override fun onCreate ( database : SQLiteDatabase ) { database . exec ( \"CREATE TABLE 'Foo' (bar INT)\" ) } override fun onUpgrade ( database : SQLiteDatabase , oldVersion : Int , newVersion : Int ) { TODO ( \"Migrate database.\" ) } } private fun deriveKey (): ByteArray ? = TODO ( \"Optional key.\" ) val databaseHelper = SQLiteOpenHelper ( context = context . applicationContext , configuration = ISQLiteOpenHelper . Configuration ( callback = MyOpenHelperCallback , key = deriveKey (), name = \"sample\" ), version = 3 ) Java class MyOpenHelperCallback implements ISQLiteOpenHelper . Callback { @Override public void onCreate ( final SQLiteDatabase database ) { database . exec ( \"CREATE TABLE 'Foo' (bar INT)\" ) } @Override public void onUpgrade ( final SQLiteDatabase database , final int oldVersion , final int newVersion ) { // TODO Migrate database. } } private byte [] deriveKey () { // TODO Optional key. } final SQLiteOpenHelper databaseHelper = new SQLiteOpenHelper ( context . applicationContext , 3 , new ISQLiteOpenHelper . Configuration ( MyOpenHelperCallback , deriveKey (), \"sample\" ) )","title":"Using an open helper"},{"location":"getting_started/#using-room","text":"Kotlin import com.bloomberg.selekt.android.support.buildRoomDatabase private fun deriveKey (): ByteArray ? = TODO ( \"Optional key.\" ) buildRoomDatabase ( applicationContext , MyAppDatabase :: class . java , \"sample\" , SQLiteJournalMode . WAL , deriveKey () ) Java import com.bloomberg.selekt.android.support.buildRoomDatabase ; private byte [] deriveKey () { // TODO Optional key. } buildRoomDatabase ( applicationContext , MyAppDatabase . class , \"sample.db\" , SQLiteJournalMode . WAL , deriveKey () )","title":"Using Room"},{"location":"getting_started/#directly","text":"Kotlin private fun deriveKey (): ByteArray ? = TODO ( \"Optional key.\" ) SQLiteDatabase . openOrCreateDatabase ( context . getDatabasePath ( \"sample\" ), SQLiteJournalMode . WAL . databaseConfiguration , deriveKey () ). apply { exec ( \"PRAGMA journal_mode=${SQLiteJournalMode.WAL}\" ) } Java private byte [] deriveKey () { // TODO Optional key. } final SQLiteDatabase database = SQLiteDatabase . openOrCreateDatabase ( targetContext . getDatabasePath ( \"sample\" ), SQLiteJournalMode . WAL . getDatabaseConfiguration (), deriveKey () ); database . exec ( \"PRAGMA journal_mode=WAL\" );","title":"Directly"},{"location":"getting_started/#interaction","text":"","title":"Interaction"},{"location":"getting_started/#querying-the-database","text":"Kotlin databaseHelper . writableDatabase . run { insertWithOnConflict ( \"Foo\" , ContentValues (). apply { put ( \"bar\" , 42 ) }, ConflictAlgorithm . REPLACE ) query ( false , \"Foo\" , arrayOf ( \"bar\" ), null , null ). use { it . moveToFirst () println ( it . getInt ( 0 )) } } Java final SQLiteDatabase database = databaseHelper . getWritableDatabase (); final ContentValues values = new ContentValues (); values . put ( \"bar\" , 42 ); database . insertWithOnConflict ( \"Foo\" , values , ConflictAlgorithm . REPLACE ); try ( Cursor cursor = query ( false , \"Foo\" , arrayOf ( \"bar\" ), null , null )) { cursor . moveToFirst (); System . out . println ( it . getInt ( 0 )); }","title":"Querying the database"}]}